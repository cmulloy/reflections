** Reflections on the benefits of this approach
 1. It's often very difficult to spot subtle differences between two rows of text. The computer is much better suited to the task!
 2. The diff utility in Linux is good in that it still shows only the lines that are different together with three lines before and 3 lines after the lines that are different, thus showing the context of each of the differences.
 3. The diff function allows one to quickly identify the differences and exclude items that are the same.
 4. The diff application only works with text files.
 5. The location of each of the changes is identified in the diff output which is preceeded by a '@@' and the line number in the file.
 6. The order that the files are listed when invoking the diff function is important. If the old file is given first, then the '-' indicates the lines that were removed from the old file and '+' indicates the text that was added in the new file.
 7. The fact that the entire lines are shown in the old and the new file helps show the differences in context within the line.
** Reflect: How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
1. There's no confusion about which change was made in what sequence.
2. It captures the evolution of the programme.
3. If errors have been introduced into the file following a version update, then it's easier to see where the error might have been introduced.
4. It's possible to try something out to see if it resolves a particular issue, knowing that you can easily revert with confidence to any previous version.


** What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

*** Pros 
1. It allows you to select the optimum time to commit, where the amount of changes made are just rigth! That is best decided by you!
2. Only you can decide when an logical completion of a step has been achieved to justify a committ!
3. The amount of code committed at a time should be related to a single logical completion.
*** Cons
You may forget to make a committ upon completion of a logical piece of work. 

** Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
1. Some systems of VC don't accomodate the concept that changes may happen to a number of linked files and therefore do not cater for this situation.
2. Git accepts that to implement a logical change in function to an application may require changes to multiple file to implement the new function. if one were to revert to a previous situation prior to the implementation of the new feature, it could require the simultaneous roll-back of multiple files. In which case it makes sense to link the files into a single repository.
** How can you use the commands git log and git diff to view the history of files?
1. The 'git log' command can be entered on the command line in the git repository directory and it will list all git commits starting with the most recent  commit.
2. Each commit is given by a commit number that is unique. The first 4 digits of this number can be used.
3. Each commit shows the message that was saved with the commit indicating the purpose of that commit.
4. a 'git diff' using two diff ids compares the changes made on a file by file basis between those two commits.

** How might using version control make you more confident to make changes that could break something?
1. If commits are made in logical steps where one function change is committed at a time, it's alway possible to revert to a previous commit if a problem has been introduced.
2. It's also possible to review each of the changes that have been made on each commit on a line by line basis across all files which will, hopefully, identify how the error was introduced.


** Now that you have your workspace set up, what do you want to try using Git for?
1. I want to be able to control all manual projects that I'm working on.
2. I want to be able to control all configuration files for emacs and gnus
3. I want to be able to control all org files of any complexity that I write.
4. I want to be able to control all org files in work in git as well as saving to the central svn repository.








